-- users table

create table if not exists "new_users" (
"id" serial primary key,
"username" varchar(25) unique not null,	
"last_login" TIMESTAMP WITH TIME ZONE,
constraint "no_blank_username" check (length(trim("username"))>0)
);

-- topics table

create table if not exists "new_topics" (
"id" serial,
"topic_name" varchar(30) unique not null,	
"topic_desc" varchar(500),
primary key ("id"),
constraint "no_blank_topic" check (length(trim("topic_name"))>0)
);

create table if not exists "new_posts" (
"id" serial,
"user_id" int,
"topic_id" INT,
"post_title" varchar(100) not null,
"url" varchar,
"post_content" varchar,
"post_dt" timestamp,
primary key ("id"),
constraint "user_id_fk" foreign key ("user_id") references "new_users"("id") on delete set null,
constraint "topic_id_fk" foreign key ("topic_id") references "new_topics"("id") on delete cascade,
constraint "url_post_content_fk" check (("url" is null and "post_content" is not null) or ("url" is not null and "post_content" is null)),
constraint "no_blank_post" check (length(trim("post_title"))>0)
);



create table if not exists "new_comments" (
"id" serial,
"comment_content" varchar,
"user_id" int,
"post_id" int,
-- "topic_id" int,
"comment_id" int,
"comment_dt" timestamp not null default current_timestamp,
primary key ("id"),
-- constraint "post_id_fk" foreign key ("post_id") references "new_posts"("id") on delete cascade,
-- constraint "user_id_fk" foreign key ("user_id") references "new_users"("id") on delete set null,
constraint "comment_id_fk" foreign key ("comment_id") references "new_comments"("id") on delete cascade,
constraint "no_blank_comment" check (length(trim("comment_content"))>0)
);


create table if not exists "new_votes" (
"id" serial primary key,
"post_id" integer,
"user_id" integer,
"vote" SMALLINT,
constraint "user_id_fk" foreign key ("user_id") references "new_users"("id") on delete set null,
constraint "post_id_fk" foreign key ("post_id") references "new_posts"("id") on delete cascade,
"vote_value" int check (("vote_value" = 1) OR ("vote_value" = -1)),
constraint "unique_vote" unique ("user_id", "post_id")	
);

CREATE INDEX "users_post" ON "new_posts" ("user_id");
CREATE INDEX "posts_url" ON "new_posts" ("url");
CREATE INDEX "posts_topic" ON "new_posts" ("topic_id");
CREATE INDEX "main_comments" ON "new_comments" ("comment_id");
CREATE INDEX "user_comments" ON "new_comments" ("user_id");
CREATE INDEX "votes_cnt" ON "new_votes" ("vote");


insert into "new_users" ("username")
select distinct username from bad_comments
union
select username from bad_posts
union
select distinct regexp_split_to_table(upvotes,',') 
from public.bad_posts
union
select distinct regexp_split_to_table(downvotes,',') 
from public.bad_posts
;

select * from "new_users";

insert into public.new_topics("topic_name")
select distinct topic
from public.bad_posts;

select * from public.new_topics;

insert into new_posts(post_title,url,post_content, user_id,topic_id)
select bp.title, bp.url, bp.text_content, u.id, tp.id
from public.bad_posts bp
join public.new_users u
on bp.username = u.username
join public.new_topics tp
on bp.topic = tp.topic_name
where length(trim(bp.title))<=100;

select * from new_posts;

INSERT INTO public.new_comments (user_id, post_id, comment_content)
SELECT np.user_id, u.id, bc.text_content
FROM public.bad_comments bc
JOIN public.new_users u
ON u.username = bc.username
JOIN public.new_posts np
ON np.id = bc.post_id;


insert into new_votes(post_id, user_id, vote) 
select a.id post_id, b.id user_id, 1 as upvote from (
	

ON CONFLICT DO NOTHING

	

drop table if exists test;

create temp table if not exists test as (	
select post_id, username, vote, vote_value from 
select post_id, username, 1 as vote_value from (
select id post_id, username, regexp_split_to_table(upvotes, ',') vote_value
from public.bad_posts) a
union
select post_id, username, -1 as vote_value from (
select id post_id, username, regexp_split_to_table(downvotes, ',') vote_value
from public.bad_posts) b);
	
-- 	select count(*) from test
insert into new_votes (post_id,user_id,vote_value )
select post_id, u.id vote from test a
join public.new_users u on a.username = u.username;



INSERT INTO "new_votes" ("user_id","post_id","vote_value")
SELECT new_users.id AS user_id
,a.id AS post_id
,-1 AS "downvotes"
FROM (
SELECT REGEXP_SPLIT_TO_TABLE("downvotes", ',') AS username
,bad_posts.id
FROM bad_posts
) AS a

JOIN new_users ON new_users.username = a.username
JOIN new_posts ON new_posts.user_id = new_users.id

UNION

SELECT new_users.id AS user_id
,b.id AS post_id
,1 AS "upvotes"

FROM (
SELECT REGEXP_SPLIT_TO_TABLE("upvotes", ',') AS username
,bad_posts.id
FROM bad_posts) AS b

JOIN new_users ON new_users.username = b.username
JOIN new_posts ON new_posts.user_id = new_users.id
on conflict do nothing;

